import tensorflow as tf
import wandb
import pandas as pd
from wandb.keras import WandbCallback
import numpy as np




conf_dict = {
  "Machine" : "HPEnvy15x360",
  "CPU" : "AMD Ryzen 4700U",
  "batch-size" : 64,
  "epochs" : 50,
}

wandb.init(project="ml-malware-detection")
wandb.config = conf_dict




x_train = pd.read_csv('train.csv', index_col=0)
x_test = pd.read_csv('test.csv', index_col=0)
train_labels = pd.read_csv('trainLabels.csv')

print(x_test.info())



ids = x_train.loc[:,'id']
x_train.drop(columns='id', inplace=True)
input_size = x_train.shape[1]
print(x_train.info())



y_train = []
y_test = []
num_classes = 0
for id in ids:
  if id in train_labels.loc[:,'Id'].to_list():
    temp = train_labels.loc[train_labels['Id'] == id, 'Class'].to_list()
    if temp[0] not in y_train:
      num_classes += 1
    y_train.append(temp[0])

ids = x_test.loc[:,'id']
x_test.drop(columns=['id'], inplace=True)
for id in ids:
  if id in train_labels.loc[:,'Id'].to_list():
    temp = train_labels.loc[train_labels['Id'] == id, 'Class'].to_list()
    y_test.append(temp[0])

x_train = np.array(x_train)
y_train = np.array(y_train)
x_test = np.array(x_test)
y_test = np.array(y_test)
print(y_train)
y_train = tf.keras.utils.to_categorical(y_train, num_classes+1)
y_test = tf.keras.utils.to_categorical(y_test, num_classes+1)

print(x_train)
print(y_train)



model = tf.keras.Sequential()
model.add(tf.keras.layers.Dense(16, activation='relu', input_shape=(input_size,)))
model.add(tf.keras.layers.Dropout(0.2))
model.add(tf.keras.layers.Dense(16, activation='relu'))
model.add(tf.keras.layers.Dense(num_classes+1, activation='softmax'))

model.summary()
model.compile(loss='categorical_crossentropy', optimizer=tf.keras.optimizers.Adam(), metrics=['accuracy'])

history = model.fit(x_train, y_train, batch_size=conf_dict['batch-size'], epochs=conf_dict['epochs'], verbose=1, #validation_data=(x_test, y_test),  
                    callbacks=WandbCallback())

print('----------------------------------------------------')
score = model.evaluate(x_test, y_test, verbose=1)