import numpy as np
import re
import os
import pandas as pd
from tqdm import tqdm

#f = open('../dataset/kaggle/0A32eTdBKayjCWhZqDOQ.bytes', 'r')

SIZE = 128
directory = '../dataset/kaggle_test/'
comp_dir = '../dataset/kaggle/'
final_data = []
it = 0
total = len(os.listdir(directory))
reverse = False

in_dir = 0
for fn in os.listdir(directory):
  if fn in os.listdir(comp_dir):
    in_dir += 1

print('Duplicates: {}'.format(in_dir/len(os.listdir(directory))))

for filename in os.listdir(directory):
  fpath = os.path.join(directory, filename)
  # checking if it is a file
  if os.path.isfile(fpath):
      print(fpath)
  
  f = open(fpath, 'r')
  lines = f.readlines()
  lines = [l.replace('?', '0') for l in lines]

  res = [0]*SIZE
  current = []
  with tqdm(total=len(lines), desc='Convert to fft: ') as bar:
    for line in lines:
      without_addr = re.sub('^[0-9A-F]{8}', '', line)
      pure_hex = without_addr.strip().split(' ')
      current += pure_hex
      if len(current) >= SIZE:
        pure_ints = [int(hex, 16) for hex in current]

        fft_res = np.fft.fft(pure_ints)
        fft_res_abs = [np.abs(c) for c in fft_res]
        while len(fft_res_abs) < SIZE:
          fft_res_abs.append(0)
        res = np.add(res, fft_res_abs)
        current = []
      bar.update(1)
  res = np.true_divide(res, len(lines))
  res = np.true_divide(res, max(res))
  final_data.append(np.append(res, filename.replace(".bytes", "")))
  it += 1
  print('File {0} out of {1}'.format(it, total))

df = pd.DataFrame(final_data)
cols = [str(i) for i in range(0, SIZE)]
cols.append('id')
df.columns = cols
df.to_csv('test2.csv')

exit(0)



res = [0]*16
with tqdm(total=len(lines), desc='Convert to fft: ') as bar:
  for line in lines:
    without_addr = re.sub('^[0-9A-F]{8}', '', line)
    pure_hex = without_addr.strip().split(' ')
    pure_ints = [int(hex, 16) for hex in pure_hex]

    fft_res = np.fft.fft(pure_ints)
    fft_res_abs = [np.abs(c) for c in fft_res]
    while len(fft_res_abs) < 16:
      fft_res_abs.append(0)
    res = np.add(res, fft_res_abs)
    #print(res)
    #sys.stdin.read(1)
    bar.update(1)

res = np.true_divide(res, len(lines))
"""
fig = plt.figure()
print(len(res))
plt.plot(res, '*')
plt.show()
"""


final_data = [res]
pd.DataFrame(final_data).to_csv('test.csv')


"""
before = f.readline()
after = re.sub('^[0-9A-F]{8}', '', before)


print('Before: {}'.format(before))
print('After: {}'.format(after))
after = after.strip().replace(' ', '')
print('Without whitespaces: {}'.format(after))
after = '0x' + after
print('As hex: {}'.format(after))

print(int(after, 16))



after = after.strip().split(' ')
after = [int(hex, 16) for hex in after]

print(after)

res = np.fft.fft(after)
print(res[0])
res = [np.abs(c) for c in res]

l = []
l.append(res)

print(l)

fig = plt.figure()
plt.plot(np.mean(l, axis=0), '*')
plt.show()
"""