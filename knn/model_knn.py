import os
import tqdm
import cv2
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import classification_report
from sklearn.preprocessing import LabelEncoder


DIRECTORY_AGGREGATION_MALWARE_IMAGES = "malware_types_aggregated_images/"

df = pd.read_csv("stats_of_dataset.csv")
number_of_malware = df['NumberOfMalware'].sum()


class DatasetLoader:

    @staticmethod
    def load(images_path: str) -> (np.array, np.array):
        data, labels = [], []

        with tqdm(total=number_of_malware, desc="Loading dataset: ") as bar:
            for root, dirs, files in os.walk(DIRECTORY_AGGREGATION_MALWARE_IMAGES):
                for file in files:
                    filename = f"{root}/{file}"
                    im = cv2.imread(filename, flags=cv2.IMREAD_UNCHANGED)
                    im = DatasetLoader.preprocess(im, 8, 8)
                    labels.append(root.split("/")[-1])
                    data.append(im)
                    bar.update(1)

        return (np.array(data), np.array(labels))

    @staticmethod
    def preprocess(image: np.ndarray, width: int, height: int):
        return cv2.resize(image, (width, height), interpolation=cv2.INTER_AREA)


(data, labels) = DatasetLoader.load(DIRECTORY_AGGREGATION_MALWARE_IMAGES)
data = data.reshape(data.shape[0], data.shape[1]*data.shape[2])

le = LabelEncoder()
labels = le.fit_transform(labels)

(train_x, test_x, train_y, test_y) = train_test_split(data, labels, test_size=0.25, random_state=42)

model = KNeighborsClassifier(n_neighbors=4, n_jobs=1, leaf_size=30)
model.fit(train_x, train_y)
print(classification_report(test_y, model.predict(test_x), target_names=le.classes_))
print(model.score(test_x, test_y))